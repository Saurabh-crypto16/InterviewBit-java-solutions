/*better Approach- start from (0,n-1) and if the element at this index is greater than target then move one column left in same row(i,j-1) else if element is smaller than target then move to next row but same column(i+1,j) till either  ( j<0 || i>=n ) */
public class Solution {
    public int searchMatrix(ArrayList<ArrayList<Integer>> A, int B) {
        int i=0,j=A.get(0).size()-1;
        while(true){
            if(i>=A.size() || j<0)  break;
            if(A.get(i).get(j)==B)  return 1;
            else if(A.get(i).get(j)>B){
                j--;  //move to previous column in same row
            }else{
                i++;  //move to next row in same column
            }
        }
        return 0;
    }
}



//O(nlogn) approach
public class Solution {
  public int searchMatrix(ArrayList<ArrayList<Integer>> A, int B) {
    if (A.size() == 0 || A.get(0).size() == 0) {
      return 0;
    }
    int start = 0;
    int end = A.size() - 1;
    while (start <= end) {
      int mid = (start + end) / 2;
      if (A.get(mid).get(0) > B) {
        end = mid - 1;
      }
      else {
        int tempIdx = binarySearchHelper(A.get(mid), B);
        if (tempIdx != -1) {
          return 1;
        }
        start = mid + 1;
      }
    }
    return 0;
  }

  private int binarySearchHelper(ArrayList<Integer> A, int B) {
    int start = 0;
    int end = A.size() - 1;
    while (start <= end) {
      int mid = (start + end) / 2;
      if (A.get(mid) == B) {
        return mid;
      }
      else if (A.get(mid) > B) {
        end = mid - 1;
      }
      else {
        start = mid + 1;
      }
    }
    return -1;
  }
}
