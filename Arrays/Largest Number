//Using Priority Queue
public class Solution {
    public String largestNumber(final List<Integer> A) {
        PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>() {
        @Override
        public int compare(Integer o1, Integer o2) {
          String s1 = String.valueOf(o1);
          String s2 = String.valueOf(o2);
          String XY = s1 + s2;
          String YX = s2 + s1;
          return XY.compareTo(YX) > 0 ? -1 : 1;
        }
       });
        pq.addAll(A);
        StringBuilder sb = new StringBuilder();
        while (!pq.isEmpty()) {
          sb.append(pq.poll());
     }
     return sb.charAt(0) == '0' ? "0" :sb.toString();
    }
}



//Using List Comparator
public class Solution {
	public String largestNumber(final List<Integer> a) {
	    List<String> strs = new ArrayList<String>();
	    for(Integer i : a){
	        strs.add(String.valueOf(i));
	    }
	    
	    Collections.sort(strs, new MyCompartor());
	    
	     StringBuffer strBuf = new StringBuffer();
	    for(String s : strs){
	        if("0".equals(s) && strBuf.length() != 0) {
	            continue;   
	        }
	        strBuf.append(s);
	    }

	    return strBuf.toString();
	}
	
	
}

class MyCompartor implements Comparator<String>{
    @Override
    public int compare(String s1, String s2){
        String first = s1 + s2;
        String second = s2 + s1;
        return second.compareTo(first);
    }
}
